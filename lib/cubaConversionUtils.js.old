/**
 * Utilitários para conversão de cubas
 * Converte quantidades decimais de cuba-g em combinações de Cuba-g + Cuba-p
 * Converte quantidades pequenas de cuba em Potes
 */

import { parseQuantity, formattedQuantity } from '@/components/utils/orderUtils';

/**
 * Converte uma quantidade decimal de cuba-g para combinação cuba-g + cuba-p ou Potes
 * 
 * Regras de conversão:
 * - 0,1 → 1 Pote (caso especial)
 * - 0,00 a 0,24 → ignora (arredonda para baixo) - EXCETO 0,1
 * - 0,25 a 0,49 → ½ Cuba-p
 * - 0,50 a 0,74 → 1 Cuba-p  
 * - 0,75 a 0,99 → 1½ Cuba-p
 * 
 * @param {number|string} quantity - Quantidade original em cuba-g
 * @returns {Object} Objeto com conversão detalhada
 */
export function convertCubaQuantity(quantity) {
  const numQuantity = parseQuantity(quantity);
  
  if (numQuantity === 0) {
    return {
      original: numQuantity,
      cuba_g: 0,
      cuba_p: 0,
      cuba_p_fraction: null,
      formatted: "0",
      display: "",
      isPote: false
    };
  }

  // Caso especial: 0,1 cuba-g = 1 Pote
  if (Math.abs(numQuantity - 0.1) < 0.001) {
    return {
      original: numQuantity,
      cuba_g: 0,
      cuba_p: 0,
      cuba_p_fraction: null,
      formatted: "0,1",
      display: "1 Pote",
      isPote: true
    };
  }

  // Separar parte inteira e decimal
  const integerPart = Math.floor(numQuantity);
  const decimalPart = numQuantity - integerPart;
  
  let cubaG = integerPart;
  let cubaP = 0;
  let cubaPFraction = null;
  
  // Aplicar regras de conversão para parte decimal
  if (decimalPart >= 0.75) {
    // 0,75 a 0,99 → 1½ Cuba-p
    cubaP = 1;
    cubaPFraction = 0.5;
  } else if (decimalPart >= 0.50) {
    // 0,50 a 0,74 → 1 Cuba-p
    cubaP = 1;
  } else if (decimalPart >= 0.25) {
    // 0,25 a 0,49 → ½ Cuba-p
    cubaP = 0;
    cubaPFraction = 0.5;
  }
  // 0,00 a 0,24 → ignora (não adiciona cuba-p)

  return {
    original: numQuantity,
    cuba_g: cubaG,
    cuba_p: cubaP,
    cuba_p_fraction: cubaPFraction,
    formatted: formatCubaDisplay(cubaG, cubaP, cubaPFraction),
    display: generateCubaDisplayText(cubaG, cubaP, cubaPFraction),
    isPote: false
  };
}

/**
 * Formata a exibição das cubas convertidas
 * @param {number} cubaG - Número de cubas grandes
 * @param {number} cubaP - Número de cubas pequenas inteiras
 * @param {number|null} cubaPFraction - Fração de cuba pequena (0.5 para ½)
 * @returns {string} Formato para cálculos (ex: "5.5")
 */
function formatCubaDisplay(cubaG, cubaP, cubaPFraction) {
  let total = cubaG;
  
  if (cubaP > 0) {
    total += cubaP * 0.5; // Assumindo que cuba-p é metade da cuba-g
  }
  
  if (cubaPFraction) {
    total += cubaPFraction * 0.5; // ½ Cuba-p = 0.25
  }
  
  return formattedQuantity(total);
}

/**
 * Gera texto de exibição para o usuário
 * @param {number} cubaG - Número de cubas grandes  
 * @param {number} cubaP - Número de cubas pequenas inteiras
 * @param {number|null} cubaPFraction - Fração de cuba pequena
 * @returns {string} Texto para exibição (ex: "5 Cuba-g + 1 Cuba-p")
 */
function generateCubaDisplayText(cubaG, cubaP, cubaPFraction) {
  const parts = [];
  
  if (cubaG > 0) {
    parts.push(`${cubaG} Cuba-g`);
  }
  
  // Se tem cuba-p inteira E fração, combinar em uma única exibição
  if (cubaP > 0 && cubaPFraction) {
    const totalCubaP = cubaP + cubaPFraction;
    if (totalCubaP === 1.5) {
      parts.push("1½ Cuba-p");
    } else {
      // Para outros valores, mostrar como decimal
      parts.push(`${formattedQuantity(totalCubaP)} Cuba-p`);
    }
  } else if (cubaP > 0) {
    parts.push(`${cubaP} Cuba-p`);
  } else if (cubaPFraction) {
    if (cubaPFraction === 0.5) {
      parts.push("½ Cuba-p");
    } else {
      parts.push(`${formattedQuantity(cubaPFraction)} Cuba-p`);
    }
  }
  
  if (parts.length === 0) {
    return "";
  }
  
  return parts.join(" + ");
}

/**
 * Converte uma lista de itens aplicando conversão de cuba
 * @param {Array} items - Lista de itens do pedido
 * @returns {Array} Items com conversão aplicada
 */
export function convertItemsCubaQuantities(items) {
  if (!Array.isArray(items)) return [];
  
  return items.map(item => {
    // Aplicar conversão apenas para itens com unit_type cuba-g
    if (item.unit_type === 'cuba-g') {
      const conversion = convertCubaQuantity(item.quantity);
      
      return {
        ...item,
        original_quantity: item.quantity,
        converted_quantity: conversion.formatted,
        cuba_conversion: conversion,
        display_quantity: conversion.display
      };
    }
    
    // Para outros tipos de unidade, manter original
    return {
      ...item,
      display_quantity: `${formattedQuantity(item.quantity)} ${item.unit_type || ''}`
    };
  });
}

/**
 * Aplica conversão de cuba em itens consolidados por categoria
 * @param {Object} consolidatedItems - Itens agrupados por categoria
 * @returns {Object} Itens com conversão aplicada
 */
export function convertConsolidatedItemsCuba(consolidatedItems) {
  if (!consolidatedItems || typeof consolidatedItems !== 'object') {
    return {};
  }
  
  const converted = {};
  
  Object.keys(consolidatedItems).forEach(category => {
    const categoryItems = consolidatedItems[category];
    if (Array.isArray(categoryItems)) {
      converted[category] = convertItemsCubaQuantities(categoryItems);
    }
  });
  
  return converted;
}

/**
 * Gera resumo da conversão para debug/log
 * @param {Object} consolidatedItems - Itens consolidados
 * @returns {Array} Array com resumo das conversões
 */
export function generateConversionSummary(consolidatedItems) {
  const summary = [];
  
  Object.keys(consolidatedItems).forEach(category => {
    const items = consolidatedItems[category];
    
    items.forEach(item => {
      if (item.cuba_conversion) {
        summary.push({
          category,
          recipe_name: item.recipe_name,
          original: item.cuba_conversion.original,
          converted: item.cuba_conversion.display,
          cuba_g: item.cuba_conversion.cuba_g,
          cuba_p: item.cuba_conversion.cuba_p,
          cuba_p_fraction: item.cuba_conversion.cuba_p_fraction
        });
      }
    });
  });
  
  return summary;
}

/**
 * Converte quantidades pequenas de Cuba para Potes
 * Regra: 0,1 a 0,4 Cuba = 1 a 4 Potes
 * @param {number|string} quantity - Quantidade original em cuba
 * @returns {Object} Objeto com conversão para potes ou null se não aplicável
 */
export function convertCubaToPotes(quantity) {
  const numQuantity = parseQuantity(quantity);
  
  // Aplicar conversão apenas para valores exatos: 0,1 0,2 0,3 0,4
  const validValues = [0.1, 0.2, 0.3, 0.4];
  
  if (validValues.some(val => Math.abs(numQuantity - val) < 0.001)) {
    const potes = Math.round(numQuantity / 0.1); // 0,1 → 1, 0,2 → 2, etc.
    
    return {
      original: numQuantity,
      potes: potes,
      display: `${potes} ${potes === 1 ? 'Pote' : 'Potes'}`,
      shouldConvert: true
    };
  }
  
  return {
    original: numQuantity,
    shouldConvert: false,
    display: null
  };
}